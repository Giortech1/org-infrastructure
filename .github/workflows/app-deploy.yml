# File: .github/workflows/app-deploy.yml
name: Deploy Application

on:
  push:
    branches:
      - develop
      - uat
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, uat, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - uat
          - prod

env:
  REGION: us-central1

jobs:
  determine-context:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      application: ${{ steps.set-app.outputs.application }}
      project_id: ${{ steps.set-project.outputs.project_id }}
      service_name: ${{ steps.set-service.outputs.service_name }}
    
    steps:
      - name: Set environment based on branch or input
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
            echo "environment=uat" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
          echo "Using environment: ${{ steps.set-env.outputs.environment }}"
      
      - name: Set application based on repository
        id: set-app
        run: |
          # Extract application name from repository name
          # Expected format: owner/app-name or owner/app-name-suffix
          REPO_NAME="${{ github.repository }}"
          # First extract the repo part (after the /)
          REPO_PART=$(echo $REPO_NAME | cut -d'/' -f2)
          
          # Debugging
          echo "Repository name: $REPO_NAME"
          echo "Repository part: $REPO_PART"
          
          # Then determine application by prefix or name
          if [[ "$REPO_PART" == "org-infrastructure" ]]; then
            APP_NAME="giortech"  # Set default application for infra repo
          elif [[ "$REPO_PART" == giortech* ]]; then
            APP_NAME="giortech"
          elif [[ "$REPO_PART" == waspwallet* ]]; then
            APP_NAME="waspwallet"
          elif [[ "$REPO_PART" == academyaxis* ]]; then
            APP_NAME="academyaxis"
          else
            # Default to the repository name if no match
            APP_NAME=$REPO_PART
          fi
          
          echo "application=$APP_NAME" >> $GITHUB_OUTPUT
          echo "Using application: $APP_NAME"
      
      - name: Set project ID and service name
        id: set-project
        run: |
          # Combine application and environment to form project ID
          APP="${{ steps.set-app.outputs.application }}"
          ENV="${{ steps.set-env.outputs.environment }}"
          
          PROJECT_ID="${APP}-${ENV}-project"
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "Using project ID: $PROJECT_ID"
      
      - name: Set service name
        id: set-service
        run: |
          # Create Cloud Run service name
          APP="${{ steps.set-app.outputs.application }}"
          ENV="${{ steps.set-env.outputs.environment }}"
          
          SERVICE_NAME="${APP}-${ENV}"
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "Using service name: $SERVICE_NAME"
  
  get-identity:
    needs: determine-context
    runs-on: ubuntu-latest
    outputs:
      wi_provider: ${{ steps.identity.outputs.wi_provider }}
      sa_email: ${{ steps.identity.outputs.sa_email }}
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Add initial authentication for project access
      - name: Determine project number
        id: project-num
        run: |
          # Determine project number based on known project IDs
          PROJECT_ID="${{ needs.determine-context.outputs.project_id }}"
          if [[ "$PROJECT_ID" == "giortech-dev-project" ]]; then
            echo "number=653675374627" >> $GITHUB_OUTPUT
          elif [[ "$PROJECT_ID" == "giortech-uat-project" ]]; then
            echo "number=28962750525" >> $GITHUB_OUTPUT
          elif [[ "$PROJECT_ID" == "giortech-prod-project" ]]; then
            echo "number=371831144642" >> $GITHUB_OUTPUT
          else
            echo "number=653675374627" >> $GITHUB_OUTPUT  # Default to dev as fallback
          fi
          echo "Using project number: ${{ steps.project-num.outputs.number }}"
      
      - name: Authenticate for initial setup
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/${{ steps.project-num.outputs.number }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: github-actions-sa@${{ needs.determine-context.outputs.project_id }}.iam.gserviceaccount.com
          token_format: 'access_token'
      
      - name: Set up Cloud SDK for initial setup
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'
          project_id: ${{ needs.determine-context.outputs.project_id }}
      
      - name: Verify GCP connection
        run: |
          echo "Testing GCP connection:"
          gcloud auth list
          gcloud config list project
          echo "Storage buckets accessible to service account:"
          gcloud storage buckets list --project=${{ needs.determine-context.outputs.project_id }} || echo "Unable to list buckets"
      
      - name: Set Terraform working directory
        id: tf-dir
        run: |
          ENV_DIR="${{ needs.determine-context.outputs.environment }}"
          if [ "$ENV_DIR" = "develop" ]; then
            ENV_DIR="dev"
          fi

          TF_DIR="terraform/organization/${{ needs.determine-context.outputs.application }}/$ENV_DIR"
          TF_DIR=$(echo "$TF_DIR" | xargs)  # Trim whitespace

          echo "Resolving TF_DIR to: '$TF_DIR'"
          ls -la "$(dirname "$TF_DIR")" || echo "Parent directory does not exist"
          ls -la "$TF_DIR" || echo "Target directory does not exist"

          if [ ! -d "$TF_DIR" ]; then
            echo "Error: Directory $TF_DIR does not exist"
            exit 1
          fi

          echo "tf_dir=$TF_DIR" >> $GITHUB_OUTPUT
          echo "Using Terraform directory: $TF_DIR"
      
      - name: Setup Terraform
        if: steps.tf-dir.outputs.tf_dir != ''
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Create required directories for modules
        if: steps.tf-dir.outputs.tf_dir != ''
        run: |
          # Ensure the modules directory exists
          mkdir -p terraform/modules/workload_identity
      
      - name: Terraform Init
        if: steps.tf-dir.outputs.tf_dir != ''
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: |
          # Check if main.tf exists
          if [ -f "main.tf" ]; then
          # Create backend override file
          echo 'terraform {
  backend "gcs" {
    bucket  = "academyaxis-terraform-state"
    prefix  = "${{ needs.determine-context.outputs.application }}/${{ needs.determine-context.outputs.environment }}"
  }
}' > backend.tf

          # Create a provider file to ensure proper authentication
          echo 'provider "google" {
  project = "${{ needs.determine-context.outputs.project_id }}"
  region  = "${{ env.REGION }}"
}' > provider.tf

          echo "Running terraform init..."
          # Initialize with explicit configuration
          terraform init -reconfigure
          else
          echo "Warning: main.tf not found in ${{ steps.tf-dir.outputs.tf_dir }}"
          echo "Available files:"
          ls -la
          echo "Skipping terraform init"
          fi
      
      - name: Get Workload Identity Provider and Service Account
        id: identity
        run: |
          PROJECT_ID="${{ needs.determine-context.outputs.project_id }}"
          
          # Determine project number based on known project IDs
          if [[ "$PROJECT_ID" == "giortech-dev-project" ]]; then
            PROJECT_NUM="653675374627"
          elif [[ "$PROJECT_ID" == "giortech-uat-project" ]]; then
            PROJECT_NUM="28962750525"
          elif [[ "$PROJECT_ID" == "giortech-prod-project" ]]; then
            PROJECT_NUM="371831144642"
          else
            PROJECT_NUM=$(gcloud projects describe $PROJECT_ID --format='value(projectNumber)' 2>/dev/null || echo '12345')
          fi
          
          # Try to get from Terraform if possible
          if [ -d "${{ steps.tf-dir.outputs.tf_dir }}" ] && [ -f "${{ steps.tf-dir.outputs.tf_dir }}/main.tf" ]; then
            cd ${{ steps.tf-dir.outputs.tf_dir }}
            
            # Run terraform apply to ensure outputs are available
            terraform apply -auto-approve
            
            # Get the outputs or use fallback values
            PROVIDER=$(terraform output -raw workload_identity_provider 2>/dev/null || echo "")
            SA_EMAIL=$(terraform output -raw service_account_email 2>/dev/null || echo "")
          else
            PROVIDER=""
            SA_EMAIL=""
          fi
          
          # Use hardcoded values if needed
          if [ -z "$PROVIDER" ] || [ -z "$SA_EMAIL" ]; then
            echo "Using hardcoded Workload Identity values"
            PROVIDER="projects/$PROJECT_NUM/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
            SA_EMAIL="github-actions-sa@$PROJECT_ID.iam.gserviceaccount.com"
          fi
          
          echo "wi_provider=$PROVIDER" >> $GITHUB_OUTPUT
          echo "sa_email=$SA_EMAIL" >> $GITHUB_OUTPUT
          
          echo "Using Workload Identity Provider: $PROVIDER"
          echo "Using Service Account: $SA_EMAIL"
  
  build-and-deploy:
    needs: [determine-context, get-identity]
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ needs.get-identity.outputs.wi_provider }}
          service_account: ${{ needs.get-identity.outputs.sa_email }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Verify GCP authentication and project
        run: |
          echo "Listing available projects:"
          gcloud projects list --limit=5
          
          echo "Current project info:"
          gcloud config get-value project
          gcloud projects describe ${{ needs.determine-context.outputs.project_id }} || echo "Project not found or not accessible"
          
          echo "Checking if required APIs are enabled:"
          gcloud services list --project=${{ needs.determine-context.outputs.project_id }} | grep -E 'cloudbuild|run|compute|storage' || echo "Some APIs may need to be enabled"
      
      - name: Build Container
        run: |
          echo "Building container for ${{ needs.determine-context.outputs.application }} (${{ needs.determine-context.outputs.environment }})"
          
          # Ensure cloudbuild API is enabled
          gcloud services enable cloudbuild.googleapis.com --project=${{ needs.determine-context.outputs.project_id }}
          
          # Check if Dockerfile exists
          if [ ! -f "Dockerfile" ]; then
            echo "Warning: Dockerfile not found at root. Using fallback image."
            echo "Skipping build step."
            echo "CONTAINER_IMAGE=gcr.io/google-samples/hello-app:1.0" >> $GITHUB_ENV
            exit 0
          fi
          
          # Submit the build to Cloud Build
          gcloud builds submit \
            --tag gcr.io/${{ needs.determine-context.outputs.project_id }}/${{ needs.determine-context.outputs.application }}:${{ github.sha }} \
            --project=${{ needs.determine-context.outputs.project_id }} \
            . || {
              echo "Build failed. Using fallback image."
              echo "CONTAINER_IMAGE=gcr.io/google-samples/hello-app:1.0" >> $GITHUB_ENV
              exit 0
            }
          
          echo "CONTAINER_IMAGE=gcr.io/${{ needs.determine-context.outputs.project_id }}/${{ needs.determine-context.outputs.application }}:${{ github.sha }}" >> $GITHUB_ENV
      
      - name: Deploy to Cloud Run
        run: |
          echo "Deploying to Cloud Run: ${{ needs.determine-context.outputs.service_name }}"
          
          # Ensure Cloud Run API is enabled
          gcloud services enable run.googleapis.com --project=${{ needs.determine-context.outputs.project_id }}
          
          # Check if service exists and create/update accordingly
          if gcloud run services describe ${{ needs.determine-context.outputs.service_name }} \
            --project=${{ needs.determine-context.outputs.project_id }} \
            --region=${{ env.REGION }} 2>/dev/null; then
            
            echo "Updating existing service"
            COMMAND="update"
          else
            echo "Creating new service"
            COMMAND="deploy"
          fi
          
          # Use CONTAINER_IMAGE environment variable set in the build step
          CONTAINER_IMAGE=${CONTAINER_IMAGE:-gcr.io/google-samples/hello-app:1.0}
          
          # Deploy the container to Cloud Run
          gcloud run services $COMMAND ${{ needs.determine-context.outputs.service_name }} \
            --project=${{ needs.determine-context.outputs.project_id }} \
            --image=$CONTAINER_IMAGE \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated
      
      - name: Post-Deployment Tests
        run: |
          echo "Running post-deployment tests..."
          
          # Get the service URL
          SERVICE_URL=$(gcloud run services describe ${{ needs.determine-context.outputs.service_name }} \
            --project=${{ needs.determine-context.outputs.project_id }} \
            --region=${{ env.REGION }} \
            --format="get(status.url)")
          
          # Wait a moment for the service to stabilize
          sleep 10
          
          # Test that the service is responding
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL || echo "Failed to connect")
          
          echo "Service URL: $SERVICE_URL"
          echo "HTTP Status: $HTTP_STATUS"
          
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "✅ Service is up and running"
          else
            echo "⚠️ Service returned non-200 status: $HTTP_STATUS"
            # We don't fail the workflow, as some services might return different statuses by design
          fi
