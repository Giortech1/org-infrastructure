# File: .github/workflows/app-deploy.yml
# This GitHub Actions workflow automates the deployment of applications to Google Cloud Run.
# It determines the deployment context based on the branch or manual input, sets up the necessary
# environment variables, authenticates to Google Cloud, builds the application container, and deploys it.
# The workflow is triggered on pushes to specific branches and can also be manually triggered with input parameters.
# The workflow consists of three main jobs:
# 1. `determine-context`: Determines the deployment context based on the branch or manual input.
# 2. `get-identity`: Sets up authentication and prepares the environment for deployment.
# 3. `build-and-deploy`: Builds the application container and deploys it to Google Cloud Run.
# The workflow also includes error handling and logging to ensure smooth execution and debugging.
# The workflow is designed to be flexible and reusable for different applications and environments.
# The workflow uses Google Cloud services such as Cloud Build and Cloud Run for building and deploying the application.

name: Deploy Application

on:
  push:
    branches:
      - develop
      - uat
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, uat, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - uat
          - prod

env:
  REGION: us-central1

jobs:
  determine-context:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      application: ${{ steps.set-app.outputs.application }}
      project_id: ${{ steps.set-project.outputs.project_id }}
      service_name: ${{ steps.set-service.outputs.service_name }}
    steps:
      - name: Set environment based on branch or input
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
            echo "environment=uat" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          echo "Using environment: ${{ steps.set-env.outputs.environment }}"

      - name: Set application based on repository
        id: set-app
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_PART=$(echo $REPO_NAME | cut -d'/' -f2)
          echo "Repository name: $REPO_NAME"
          echo "Repository part: $REPO_PART"
          if [[ "$REPO_PART" == "org-infrastructure" ]]; then
            APP_NAME="giortech"
          elif [[ "$REPO_PART" == giortech* ]]; then
            APP_NAME="giortech"
          elif [[ "$REPO_PART" == waspwallet* ]]; then
            APP_NAME="waspwallet"
          elif [[ "$REPO_PART" == academyaxis* ]]; then
            APP_NAME="academyaxis"
          else
            APP_NAME=$REPO_PART
          fi
          echo "application=$APP_NAME" >> $GITHUB_OUTPUT
          echo "Using application: $APP_NAME"

      - name: Set project ID and service name
        id: set-project
        run: |
          APP="${{ steps.set-app.outputs.application }}"
          ENV="${{ steps.set-env.outputs.environment }}"
          PROJECT_ID="${APP}-${ENV}-project"
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "Using project ID: $PROJECT_ID"

      - name: Set service name
        id: set-service
        run: |
          APP="${{ steps.set-app.outputs.application }}"
          ENV="${{ steps.set-env.outputs.environment }}"
          SERVICE_NAME="${APP}-${ENV}"
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "Using service name: $SERVICE_NAME"

  get-identity:
    needs: determine-context
    runs-on: ubuntu-latest
    outputs:
      wi_provider: ${{ steps.identity.outputs.wi_provider }}
      sa_email: ${{ steps.identity.outputs.sa_email }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ needs.determine-context.outputs.project_id }}

      - name: Fetch Project Number
        id: fetch-project-number
        run: |
          PROJECT_ID="${{ needs.determine-context.outputs.project_id }}"
          PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")
          echo "project_number=$PROJECT_NUMBER" >> $GITHUB_OUTPUT

      - name: Get Workload Identity Provider and Service Account
        id: identity
        run: |
          PROJECT_ID="${{ needs.determine-context.outputs.project_id }}"
          PROJECT_NUMBER="${{ steps.fetch-project-number.outputs.project_number }}"
          WI_PROVIDER="projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
          SA_EMAIL="github-actions-sa@$PROJECT_ID.iam.gserviceaccount.com"
          echo "wi_provider=$WI_PROVIDER" >> $GITHUB_OUTPUT
          echo "sa_email=$SA_EMAIL" >> $GITHUB_OUTPUT
          echo "Using Workload Identity Provider: $WI_PROVIDER"
          echo "Using Service Account: $SA_EMAIL"

  build-and-deploy:
    needs: [determine-context, get-identity]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ needs.get-identity.outputs.wi_provider }}
          service_account: ${{ needs.get-identity.outputs.sa_email }}
          project_id: ${{ needs.determine-context.outputs.project_id }}
          create_credentials_file: true
          token_format: 'access_token'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ needs.determine-context.outputs.project_id }}