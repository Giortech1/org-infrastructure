# File: .github/workflows/network-deploy.yml
name: Network Infrastructure Deployment

on:
  push:
    branches:
      - develop
      - uat
      - main
    paths:
      - 'terraform/modules/network_infrastructure/**'
      - '.github/workflows/network-deploy.yml'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, uat, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - uat
          - prod
      application:
        description: 'Application to configure (giortech, waspwallet, academyaxis)'
        required: true
        default: 'giortech'
        type: choice
        options:
          - giortech
          - waspwallet
          - academyaxis
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

jobs:
  determine-context:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      application: ${{ steps.set-app.outputs.application }}
      project_id: ${{ steps.load-config.outputs.project_id }}
      project_number: ${{ steps.load-config.outputs.project_number }}
      service_name: ${{ steps.load-config.outputs.service_name }}
      region: ${{ steps.load-config.outputs.region }}
      action: ${{ steps.set-action.outputs.action }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set environment based on trigger
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
            echo "environment=uat" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Set application based on trigger
        id: set-app
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "application=${{ github.event.inputs.application }}" >> $GITHUB_OUTPUT
          else
            # Default to giortech for automated triggers
            echo "application=giortech" >> $GITHUB_OUTPUT
          fi
      
      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      
      - name: Load configuration
        id: load-config
        run: |
          APP="${{ steps.set-app.outputs.application }}"
          ENV="${{ steps.set-env.outputs.environment }}"
          
          if [ ! -f ".github/config/project-config.yml" ]; then
            echo "::error::Configuration file not found: .github/config/project-config.yml"
            exit 1
          fi
          
          # Extract values from config file using yq
          PROJECT_ID=$(yq e ".$APP.$ENV.project_id" .github/config/project-config.yml)
          PROJECT_NUMBER=$(yq e ".$APP.$ENV.project_number" .github/config/project-config.yml)
          SERVICE_NAME=$(yq e ".$APP.$ENV.service_name" .github/config/project-config.yml)
          REGION=$(yq e ".$APP.$ENV.region" .github/config/project-config.yml)
          
          # Set outputs
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "project_number=$PROJECT_NUMBER" >> $GITHUB_OUTPUT
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Using configuration for $APP in $ENV environment:"
          echo "  Project ID: $PROJECT_ID"
          echo "  Project Number: $PROJECT_NUMBER"
          echo "  Service Name: $SERVICE_NAME"
          echo "  Region: $REGION"
      
      - name: Set action based on trigger
        id: set-action
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
          else
            echo "action=apply" >> $GITHUB_OUTPUT
          fi

  deploy-network:
    needs: determine-context
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/${{ needs.determine-context.outputs.project_number }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: github-actions-sa@${{ needs.determine-context.outputs.project_id }}.iam.gserviceaccount.com
          project_id: ${{ needs.determine-context.outputs.project_id }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ needs.determine-context.outputs.project_id }}
      
      - name: Check if Cloud Run service exists
        id: check-service
        run: |
          if gcloud run services describe ${{ needs.determine-context.outputs.service_name }} \
            --region=${{ needs.determine-context.outputs.region }} \
            --project=${{ needs.determine-context.outputs.project_id }} 2>/dev/null; then
            echo "service_exists=true" >> $GITHUB_OUTPUT
          else
            echo "service_exists=false" >> $GITHUB_OUTPUT
            echo "Warning: Cloud Run service ${{ needs.determine-context.outputs.service_name }} does not exist yet."
          fi
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Set Terraform working directory
        id: tf-dir
        run: |
          TF_DIR="terraform/network-infra/${{ needs.determine-context.outputs.application }}/${{ needs.determine-context.outputs.environment }}"
          echo "tf_dir=$TF_DIR" >> $GITHUB_OUTPUT
          
          # Create the directory if it doesn't exist
          mkdir -p $TF_DIR
      
      # Create self-signed certificate for testing (if needed)
      - name: Create self-signed certificate
        if: needs.determine-context.outputs.environment != 'prod'
        run: |
          mkdir -p terraform/modules/network_infrastructure/cert
          # Use 2048 bits instead of 4096 for key size
          openssl req -x509 -newkey rsa:2048 -keyout terraform/modules/network_infrastructure/cert/key.pem -out terraform/modules/network_infrastructure/cert/cert.pem -days 365 -nodes -subj "/CN=${{ needs.determine-context.outputs.application }}.${{ needs.determine-context.outputs.environment }}.academyaxis.io" -addext "subjectAltName = DNS:${{ needs.determine-context.outputs.application }}.${{ needs.determine-context.outputs.environment }}.academyaxis.io"
          # Verify the files exist
          ls -la terraform/modules/network_infrastructure/cert/
          
      - name: Create Terraform main.tf file
        run: |
          cat > ${{ steps.tf-dir.outputs.tf_dir }}/main.tf << EOF
           terraform {
           required_providers {
             google = {
              source  = "hashicorp/google"
              version = "~> 4.0"
            }
          }
          backend "gcs" {
            bucket = "academyaxis-terraform-state"
            prefix = "${{ needs.determine-context.outputs.application }}/network/${{ needs.determine-context.outputs.environment }}"
            }
          }

          provider "google" {
          project = var.project_id
          region  = var.region
          }

          module "network_infrastructure" {
            source = "../../../modules/network_infrastructure"
  
            project_id            = var.project_id
            region                = var.region
            environment           = var.environment
            application           = var.application
            domain                = "academyaxis.io"
            enable_cdn            = var.environment == "prod" ? true : false
            enable_cloud_armor    = var.environment == "prod" ? true : false
            cloud_run_service_name = "${{ needs.determine-context.outputs.service_name }}"
            enable_monitoring     = true
            skip_neg              = ${{ steps.check-service.outputs.service_exists != 'true' }}
          }

          output "load_balancer_ip" {
            value = module.network_infrastructure.load_balancer_ip
          }

          output "domain_name" {
          value = module.network_infrastructure.domain_name
          }

          output "name_servers" {
          value = module.network_infrastructure.name_servers
          }
          EOF
      
      - name: Create Terraform variables.tf file
        run: |
          cat > ${{ steps.tf-dir.outputs.tf_dir }}/variables.tf << EOF
          variable "project_id" {
            description = "The GCP project ID"
            type        = string
            default     = "${{ needs.determine-context.outputs.project_id }}"
          }

          variable "region" {
            description = "The GCP region"
            type        = string
            default     = "${{ needs.determine-context.outputs.region }}"
          }

          variable "environment" {
            description = "The environment (dev, uat, prod)"
            type        = string
            default     = "${{ needs.determine-context.outputs.environment }}"
          }

          variable "application" {
            description = "The application name"
            type        = string
            default     = "${{ needs.determine-context.outputs.application }}"
          }
          EOF
      
      - name: Terraform Init
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: terraform init
      
      - name: Terraform Validate
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: terraform validate
      
      - name: Terraform Plan
        if: needs.determine-context.outputs.action == 'plan' || needs.determine-context.outputs.action == 'apply'
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        if: needs.determine-context.outputs.action == 'apply'
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: terraform apply -auto-approve tfplan
      
      - name: Terraform Destroy Plan
        if: needs.determine-context.outputs.action == 'destroy'
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: terraform plan -destroy -out=tfplan
      
      - name: Terraform Destroy
        if: needs.determine-context.outputs.action == 'destroy'
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: terraform apply -auto-approve tfplan
      
      - name: Verify Deployment
        if: needs.determine-context.outputs.action == 'apply'
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: |
          echo "Network Infrastructure Deployed Successfully!"
          echo "Load Balancer IP: $(terraform output -raw load_balancer_ip 2>/dev/null || echo 'Not available')"
          echo "Domain Name: $(terraform output -raw domain_name 2>/dev/null || echo 'Not available')"
          echo "Name Servers: $(terraform output -raw name_servers 2>/dev/null || echo 'Not available')"