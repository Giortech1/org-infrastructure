# File: .github/workflows/deploy-lb-dns.yml
name: Deploy Load Balancer and DNS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, uat, prod)'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - uat
          - prod
      application:
        description: 'Application to configure (giortech, waspwallet, academyaxis)'
        required: true
        default: 'giortech'
        type: choice
        options:
          - giortech
          - waspwallet
          - academyaxis

env:
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set project variables based on inputs
        id: vars
        run: |
          # Set PROJECT_ID based on application and environment
          if [ "${{ github.event.inputs.application }}" = "giortech" ]; then
            if [ "${{ github.event.inputs.environment }}" = "prod" ]; then
              echo "PROJECT_ID=giortech-prod-project" >> $GITHUB_OUTPUT
              echo "WI_PROVIDER=projects/371831144642/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_OUTPUT
            elif [ "${{ github.event.inputs.environment }}" = "uat" ]; then
              echo "PROJECT_ID=giortech-uat-project" >> $GITHUB_OUTPUT
              echo "WI_PROVIDER=projects/28962750525/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_OUTPUT
            else
              echo "PROJECT_ID=giortech-dev-project" >> $GITHUB_OUTPUT
              echo "WI_PROVIDER=projects/653675374627/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.event.inputs.application }}" = "waspwallet" ]; then
            echo "PROJECT_ID=waspwallet-${{ github.event.inputs.environment }}-project" >> $GITHUB_OUTPUT
            # Add workload identity provider for waspwallet when available
            echo "WI_PROVIDER=projects/PLACEHOLDER/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.application }}" = "academyaxis" ]; then
            echo "PROJECT_ID=academyaxis-${{ github.event.inputs.environment }}-project" >> $GITHUB_OUTPUT
            # Add workload identity provider for academyaxis when available
            echo "WI_PROVIDER=projects/PLACEHOLDER/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_OUTPUT
          fi
          
          # Set service account email
          echo "SA_EMAIL=github-actions-sa@${{ steps.vars.outputs.PROJECT_ID }}.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
          
          echo "Using project ID: ${{ steps.vars.outputs.PROJECT_ID }}"
          echo "Using service account: ${{ steps.vars.outputs.SA_EMAIL }}"
      
      # Authenticate to Google Cloud with explicit project ID
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ steps.vars.outputs.WI_PROVIDER }}
          service_account: ${{ steps.vars.outputs.SA_EMAIL }}
          project_id: ${{ steps.vars.outputs.PROJECT_ID }}  # Add this line
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ steps.vars.outputs.PROJECT_ID }}  # Add this line
      
      # Setup Terraform after authenticating
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Set Terraform working directory
        id: tf-dir
        run: |
          # Map environment input to directory name
          ENV_DIR="${{ github.event.inputs.environment }}"
          if [ "$ENV_DIR" = "develop" ]; then
            ENV_DIR="dev"
          fi
          
          echo "Using Terraform environment directory: $ENV_DIR"
          
          # Check if directory exists
          if [ ! -d "terraform/organization/${{ github.event.inputs.application }}/$ENV_DIR" ]; then
            echo "Error: Directory terraform/organization/${{ github.event.inputs.application }}/$ENV_DIR does not exist"
            ls -la terraform/organization/${{ github.event.inputs.application }}/
            exit 1
          fi
          
          echo "tf_dir=terraform/organization/${{ github.event.inputs.application }}/$ENV_DIR" >> $GITHUB_OUTPUT
      
      # Initialize Terraform with GCP authentication
      - name: Run Terraform to get outputs
        id: tf-outputs
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: |
          # Set gcloud project explicitly before running Terraform
          gcloud config set project ${{ steps.vars.outputs.PROJECT_ID }}
          
          # Initialize Terraform with GCP backend access
          terraform init
          
          # Get the outputs (if needed)
          PROVIDER=$(terraform output -raw workload_identity_provider 2>/dev/null || echo "")
          SA_EMAIL=$(terraform output -raw service_account_email 2>/dev/null || echo "")
          
          echo "Got Workload Identity Provider: $PROVIDER"
          echo "Got Service Account: $SA_EMAIL"
      
      - name: Setup Load Balancer and DNS
        run: |
          if [ ! -f "scripts/setup-lb-dns.sh" ]; then
            echo "Error: scripts/setup-lb-dns.sh does not exist"
            exit 1
          fi
          
          chmod +x scripts/setup-lb-dns.sh
          ./scripts/setup-lb-dns.sh \
            ${{ steps.vars.outputs.PROJECT_ID }} \
            ${{ github.event.inputs.application }} \
            ${{ github.event.inputs.environment }} \
            ${{ env.REGION }}