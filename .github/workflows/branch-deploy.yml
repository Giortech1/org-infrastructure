# .github/workflows/branch-deploy.yml
name: Branch-Based Deployment

on:
  push:
    branches:
      - develop
      - uat
      - main

env:
  REGION: us-central1

jobs:
  determine-context:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      application: ${{ steps.set-app.outputs.application }}
      project_id: ${{ steps.set-project.outputs.project_id }}
    
    steps:
      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
            echo "environment=uat" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
          echo "Branch ${{ github.ref }} maps to environment: ${{ steps.set-env.outputs.environment }}"
      
      - name: Set application based on repository
        id: set-app
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_PART=$(echo $REPO_NAME | cut -d'/' -f2)
            
          if [[ "$REPO_PART" == "org-infrastructure" ]]; then
            # Map the infrastructure repo to giortech
            APP_NAME="giortech"
          elif [[ "$REPO_PART" == giortech* ]]; then
            APP_NAME="giortech"
          elif [[ "$REPO_PART" == waspwallet* ]]; then
            APP_NAME="waspwallet"
          elif [[ "$REPO_PART" == academyaxis* ]]; then
            APP_NAME="academyaxis"
          else
            APP_NAME=$REPO_PART
          fi
            
          echo "application=$APP_NAME" >> $GITHUB_OUTPUT
          echo "Repository $REPO_NAME maps to application: $APP_NAME"
      
      - name: Set project ID
        id: set-project
        run: |
          APP="${{ steps.set-app.outputs.application }}"
          ENV="${{ steps.set-env.outputs.environment }}"
          
          PROJECT_ID="${APP}-${ENV}-project"
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "Using project ID: $PROJECT_ID"
  
  deploy-infrastructure:
    needs: determine-context
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set Terraform working directory
        id: tf-dir
        run: |
          ENV_DIR="${{ needs.determine-context.outputs.environment }}"
          if [ "$ENV_DIR" = "develop" ]; then
            ENV_DIR="dev"
          fi
          
          TF_DIR="terraform/organization/${{ needs.determine-context.outputs.application }}/$ENV_DIR"
          echo "tf_dir=$TF_DIR" >> $GITHUB_OUTPUT
          
          if [ ! -d "$TF_DIR" ]; then
            echo "Error: Directory $TF_DIR does not exist"
            ls -la terraform/organization/${{ needs.determine-context.outputs.application }}/
            exit 1
          fi
          
          echo "Using Terraform directory: $TF_DIR"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Get Workload Identity Provider and Service Account
        id: identity
        run: |
          # Get project ID from previous step
          PROJECT_ID="${{ needs.determine-context.outputs.project_id }}"
          
          # Define a map of known project numbers
          declare -A PROJECT_NUMBERS
          PROJECT_NUMBERS["giortech-dev-project"]="653675374627"
          PROJECT_NUMBERS["giortech-uat-project"]="28962750525"
          PROJECT_NUMBERS["giortech-prod-project"]="371831144642"
          # Add other project numbers as they become available
          
          # Get project number from the map or using gcloud
          PROJECT_NUMBER="${PROJECT_NUMBERS[$PROJECT_ID]}"
          if [ -z "$PROJECT_NUMBER" ]; then
            echo "Project number not found in predefined map, fetching from gcloud..."
            PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format='value(projectNumber)' 2>/dev/null || echo "unknown")
            
            if [ "$PROJECT_NUMBER" == "unknown" ]; then
              echo "Warning: Could not get project number using gcloud"
            else
              echo "Got project number from gcloud: $PROJECT_NUMBER"
            fi
          else
            echo "Using predefined project number: $PROJECT_NUMBER"
          fi
          
          # Construct identity values
          PROVIDER="projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
          SA_EMAIL="github-actions-sa@$PROJECT_ID.iam.gserviceaccount.com"
          
          # Output the values
          echo "wi_provider=$PROVIDER" >> $GITHUB_OUTPUT
          echo "sa_email=$SA_EMAIL" >> $GITHUB_OUTPUT
          
          echo "Using Workload Identity Provider: $PROVIDER"
          echo "Using Service Account: $SA_EMAIL"
      
      - name: Terraform Init
        if: steps.tf-dir.outputs.tf_dir != ''
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: |
          # Check if main.tf exists
          if [ -f "main.tf" ]; then
            # Create temporary backend config file
            cat > backend_config.hcl << EOF
          bucket  = "academyaxis-terraform-state"
          prefix  = "${{ needs.determine-context.outputs.application }}/${{ needs.determine-context.outputs.environment }}"
          EOF
            
          # Get service account impersonation token
            TOKEN=$(gcloud auth print-access-token)
            
            # Create a .terraformrc file with credentials helper
            cat > ~/.terraformrc << EOF
            credentials_helper "gcloud" {
            command = "gcloud"
            args = ["auth", "application-default", "print-access-token"]
          }
          EOF
            
            # Set environment variables for Google provider authentication
            export GOOGLE_OAUTH_ACCESS_TOKEN=$TOKEN
            
            echo "Running terraform init..."
            terraform init -backend-config=backend_config.hcl -reconfigure
          else
            echo "Warning: main.tf not found in ${{ steps.tf-dir.outputs.tf_dir }}"
            echo "Available files:"
            ls -la
            echo "Skipping terraform init"
          fi
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ steps.identity.outputs.wi_provider }}
          service_account: ${{ steps.identity.outputs.sa_email }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Run Infrastructure Deployment
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: |
          terraform apply -auto-approve
      
      # Removed the setup-lb-dns.sh call as we now handle networking separately