# File: .github/workflows/branch-deploy.yml
name: Branch-Based Deployment

on:
  push:
    branches:
      - develop
      - uat
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, uat, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - uat
          - prod
      application:
        description: 'Application to deploy'
        required: true
        default: 'giortech'
        type: choice
        options:
          - giortech
          - waspwallet
          - academyaxis

env:
  REGION: us-central1

jobs:
  determine-context:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      application: ${{ steps.set-app.outputs.application }}
      project_id: ${{ steps.set-project.outputs.project_id }}
      project_number: ${{ steps.set-project-number.outputs.project_number }}
    
    steps:
      - name: Check branch/input and set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/uat" ]]; then
            echo "environment=uat" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
          ENV=$(cat $GITHUB_OUTPUT | grep environment | cut -d'=' -f2)
          echo "Using environment: $ENV"
      
      - name: Set application based on repository or input
        id: set-app
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.application }}" != "" ]]; then
            APP_NAME="${{ github.event.inputs.application }}"
          else
            # Extract application name from repository name
            REPO_NAME="${{ github.repository }}"
            REPO_PART=$(echo $REPO_NAME | cut -d'/' -f2)
            
            if [[ "$REPO_PART" == "org-infrastructure" ]]; then
              APP_NAME="giortech"  # Default for infrastructure repo
            elif [[ "$REPO_PART" == giortech* ]]; then
              APP_NAME="giortech"
            elif [[ "$REPO_PART" == waspwallet* ]]; then
              APP_NAME="waspwallet"
            elif [[ "$REPO_PART" == academyaxis* ]]; then
              APP_NAME="academyaxis"
            else
              APP_NAME="giortech"  # Default fallback
            fi
          fi
          
          echo "application=$APP_NAME" >> $GITHUB_OUTPUT
          echo "Using application: $APP_NAME"
      
      - name: Set project ID
        id: set-project
        run: |
          APP="${{ steps.set-app.outputs.application }}"
          ENV="${{ steps.set-env.outputs.environment }}"
          
          PROJECT_ID="${APP}-${ENV}-project"
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "Using project ID: $PROJECT_ID"
      
      - name: Set project number for authentication
        id: set-project-number
        run: |
          # Define direct mapping with simple variables instead of arrays
          GIORTECH_DEV="653675374627"
          GIORTECH_UAT="28962750525"
          GIORTECH_PROD="371831144642"
          
          # Get project ID from previous step
          PROJECT_ID="${{ steps.set-project.outputs.project_id }}"
          echo "Checking project number for: $PROJECT_ID"
          
          # Use simple if conditions instead of arrays
          if [[ "$PROJECT_ID" == "giortech-dev-project" ]]; then
            PROJECT_NUMBER="$GIORTECH_DEV"
          elif [[ "$PROJECT_ID" == "giortech-uat-project" ]]; then
            PROJECT_NUMBER="$GIORTECH_UAT"
          elif [[ "$PROJECT_ID" == "giortech-prod-project" ]]; then
            PROJECT_NUMBER="$GIORTECH_PROD"
          else
            PROJECT_NUMBER=""
          fi
          
          # Output result
          if [[ -z "$PROJECT_NUMBER" ]]; then
            echo "Project number not found for $PROJECT_ID in predefined mapping"
            echo "project_number=unknown" >> $GITHUB_OUTPUT
          else
            echo "project_number=$PROJECT_NUMBER" >> $GITHUB_OUTPUT
            echo "Using project number: $PROJECT_NUMBER"
          fi

  get-identity:
    needs: determine-context
    runs-on: ubuntu-latest
    outputs:
      wi_provider: ${{ steps.identity.outputs.wi_provider }}
      sa_email: ${{ steps.identity.outputs.sa_email }}
    
    steps:
      - name: Set Workload Identity values directly
        id: identity
        run: |
          PROJECT_ID="${{ needs.determine-context.outputs.project_id }}"
          PROJECT_NUMBER="${{ needs.determine-context.outputs.project_number }}"
          
          if [[ -z "$PROJECT_NUMBER" || "$PROJECT_NUMBER" == "unknown" ]]; then
            echo "Cannot determine project number. Check project mapping in workflow."
            exit 1
          fi
          
          echo "wi_provider=projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/github-pool/providers/github-provider" >> $GITHUB_OUTPUT
          echo "sa_email=github-actions-sa@$PROJECT_ID.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
          
          echo "Workload Identity Provider: projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
          echo "Service Account: github-actions-sa@$PROJECT_ID.iam.gserviceaccount.com"

  deploy-infrastructure:
    needs: [determine-context, get-identity]
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ needs.get-identity.outputs.wi_provider }}
          service_account: ${{ needs.get-identity.outputs.sa_email }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ needs.determine-context.outputs.project_id }}
      
      - name: Verify GCP connection
        run: |
          echo "Testing GCP connection:"
          gcloud auth list
          gcloud config list project
          
          echo "Current project info:"
          gcloud projects describe ${{ needs.determine-context.outputs.project_id }} || {
            echo "Unable to access project. Verify service account permissions."
            exit 1
          }
          
          echo "Checking if required APIs are enabled:"
          gcloud services list --project=${{ needs.determine-context.outputs.project_id }} | grep -E 'cloudbuild|run|compute|storage' || {
            echo "Warning: Some required APIs may need to be enabled"
            echo "Enabling essential services..."
            gcloud services enable run.googleapis.com cloudbuild.googleapis.com --project=${{ needs.determine-context.outputs.project_id }}
          }
      
      - name: Set Terraform working directory
        id: tf-dir
        run: |
          ENV_DIR="${{ needs.determine-context.outputs.environment }}"
          if [ "$ENV_DIR" = "develop" ]; then
            ENV_DIR="dev"
          fi
          
          TF_DIR="terraform/organization/${{ needs.determine-context.outputs.application }}/$ENV_DIR"
          echo "tf_dir=$TF_DIR" >> $GITHUB_OUTPUT
          
          if [ ! -d "$TF_DIR" ]; then
            echo "Warning: Directory $TF_DIR does not exist"
            mkdir -p "$TF_DIR"
            echo "Created directory: $TF_DIR"
          fi
          
          echo "Using Terraform directory: $TF_DIR"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Prepare Terraform Files
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: |
          # Only create files if they don't exist
          if [ ! -f "main.tf" ]; then
            # Backup the existing files if any
            mkdir -p backup
            cp -f *.tf backup/ 2>/dev/null || true
              
            # Create a clean main.tf
            cat > main.tf << 'EOFMAIN'
            terraform {
              required_providers {
                google = {
                  source  = "hashicorp/google"
                  version = "~> 4.0"
                }
              }
            
              backend "gcs" {}
            }
          
            provider "google" {
              project = var.project_id
              region  = var.region
            }
          
            # Basic resources for testing
            resource "google_storage_bucket" "storage" {
              name          = "${var.project_id}-bucket"
              location      = var.region
              force_destroy = true
              uniform_bucket_level_access = true
            }
          
            # Variables
            variable "project_id" {
              description = "The GCP project ID"
              type        = string
            }
          
            variable "region" {
              description = "The GCP region"
              type        = string
            }
          
            variable "environment" {
              description = "Environment (dev, uat, prod)"
              type        = string
            }
          
            # Outputs
            output "project_id" {
              value       = var.project_id
              description = "The GCP project ID"
            }
          
            output "bucket_name" {
              value       = google_storage_bucket.storage.name
              description = "Storage bucket name"
            }
            EOFMAIN
          fi

          # Create terraform.tfvars if it doesn't exist
          if [ ! -f "terraform.tfvars" ]; then
            cat > terraform.tfvars << EOF
            project_id  = "${{ needs.determine-context.outputs.project_id }}"
            region      = "${{ env.REGION }}"
            environment = "${{ needs.determine-context.outputs.environment }}"
            EOF
      
      - name: Terraform Init
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        env:
          GOOGLE_OAUTH_ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          # Create backend config file
          cat > backend.hcl << EOF
          bucket  = "academyaxis-terraform-state"
          prefix  = "${{ needs.determine-context.outputs.application }}/${{ needs.determine-context.outputs.environment }}"
        EOF
            
          # Initialize with backend config
          terraform init -backend-config=backend.hcl -reconfigure || {
            echo "Terraform init failed. This could be due to missing permissions or resources."
            echo "Attempting to create state bucket if it doesn't exist..."
            gcloud storage buckets create gs://academyaxis-terraform-state --location=us-central1 --uniform-bucket-level-access || true
            
            # Try init again
            terraform init -backend-config=backend.hcl -reconfigure
          }
      
      - name: Terraform Plan
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: |
          terraform plan -out=tfplan || {
            echo "Terraform plan failed. Check for permission or configuration issues."
            exit 1
          }
      
      - name: Terraform Apply
        working-directory: ${{ steps.tf-dir.outputs.tf_dir }}
        run: |
          terraform apply -auto-approve tfplan || {
            echo "Terraform apply failed. Check for permission or resource issues."
            terraform apply -auto-approve -refresh-only
            exit 1
          }
          
          echo "Infrastructure deployment complete!"
          terraform output -json || echo "No outputs available"