name: Cost Monitoring and Reporting

on:
  # Run on schedule
  schedule:
    # Run weekly on Monday at 8:00 AM UTC
    - cron: '0 8 * * 1'
    # Also run on the 1st and 15th of each month
    - cron: '0 8 1,15 * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'report'
        type: choice
        options:
          - report
          - optimize
      recipient:
        description: 'Email recipient'
        required: false
        default: 'devops@academyaxis.io'

env:
  BILLING_ACCOUNT_ID: 0141E4-398D5E-91A063
  EMAIL_RECIPIENT: ${{ github.event.inputs.recipient || 'devops@academyaxis.io' }}

jobs:
  cost-monitoring:
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Determine action type
        id: action
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
          else
            # Use 'report' for scheduled runs
            echo "action=report" >> $GITHUB_OUTPUT
          fi
      
      - name: Determine date information
        id: date
        run: |
          echo "current_date=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "month_name=$(date '+%B')" >> $GITHUB_OUTPUT
          echo "day_of_month=$(date '+%d')" >> $GITHUB_OUTPUT
          echo "day_of_week=$(date '+%A')" >> $GITHUB_OUTPUT
      
      - name: Google Auth for report project
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/421191438459/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: github-actions-sa@giortech-dev-project.iam.gserviceaccount.com
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Install jq
        run: sudo apt-get install -y jq
      
      - name: Run cost monitoring script
        run: |
          chmod +x ./scripts/cost_optimization.sh
          
          # Action is either 'report' or 'optimize'
          ACTION="${{ steps.action.outputs.action }}"
          
          # If it's the first of the month, run a more detailed report
          if [[ "${{ steps.date.outputs.day_of_month }}" == "01" ]]; then
            echo "Running monthly detailed cost analysis..."
            ./scripts/cost_optimization.sh report ${{ env.EMAIL_RECIPIENT }}
            
            # Generate monthly cost projection report
            echo "Generating monthly cost projection..."
            gcloud services enable billingbudgets.googleapis.com
            
            # This would be a more detailed cost report in a real implementation
            echo "Monthly cost projection report would be generated here."
          elif [[ "${{ steps.date.outputs.day_of_month }}" == "15" ]]; then
            echo "Running mid-month check..."
            ./scripts/cost_optimization.sh report ${{ env.EMAIL_RECIPIENT }}
            
            # Check if we're over 50% of the budget
            # This would be a more detailed budget check in a real implementation
            echo "Mid-month budget check would be performed here."
          elif [[ "${{ steps.date.outputs.day_of_week }}" == "Monday" ]]; then
            echo "Running weekly cost report..."
            ./scripts/cost_optimization.sh report ${{ env.EMAIL_RECIPIENT }}
          else
            echo "Running action: $ACTION"
            ./scripts/cost_optimization.sh $ACTION ${{ env.EMAIL_RECIPIENT }}
          fi
      
      - name: Generate report artifact
        if: steps.action.outputs.action == 'report'
        run: |
          mkdir -p ./reports
          
          # Generate a simple report for demonstration
          cat > ./reports/cost-report-${{ steps.date.outputs.current_date }}.md << EOL
          # AcademyAxis.io Cost Report
          
          **Date:** ${{ steps.date.outputs.current_date }}
          **Generated by:** GitHub Actions
          
          ## Current Spending
          
          | Project | Budget | Current Spend | % Used |
          |---------|--------|--------------|--------|
          | giortech-dev-project | $50 | $$(RANDOM % 50) | $$(RANDOM % 100)% |
          | giortech-uat-project | $50 | $$(RANDOM % 50) | $$(RANDOM % 100)% |
          | giortech-prod-project | $100 | $$(RANDOM % 100) | $$(RANDOM % 100)% |
          | **TOTAL** | **$300** | **$$(RANDOM % 300)** | **$$(RANDOM % 100)%** |
          
          ## Recommendations
          
          * Review unused resources
          * Optimize storage usage
          * Check for idle services
          
          ## Next Steps
          
          1. Review this report
          2. Implement recommendations
          3. Monitor dashboards for changes
          EOL
      
      - name: Upload report artifact
        if: steps.action.outputs.action == 'report'
        uses: actions/upload-artifact@v3
        with:
          name: cost-report-${{ steps.date.outputs.current_date }}
          path: ./reports/cost-report-${{ steps.date.outputs.current_date }}.md
          retention-days: 90
      
      - name: Send report notification
        if: steps.action.outputs.action == 'report'
        run: |
          echo "Sending report notification to ${{ env.EMAIL_RECIPIENT }}"
          # In a real implementation, this would use an email service
          # This is just a placeholder
      
      - name: Run optimization if budget at risk
        if: steps.action.outputs.action == 'report' && github.event_name == 'schedule'
        run: |
          # This would check if we're approaching budget limits
          # and automatically run optimization if needed
          # This is just a placeholder
          echo "Checking if optimization is needed based on current spending..."
          
          # Simulate a budget check - in reality, this would use the Billing API
          BUDGET_PERCENTAGE=$((RANDOM % 100))
          if [ $BUDGET_PERCENTAGE -gt 85 ]; then
            echo "WARNING: Budget usage at $BUDGET_PERCENTAGE%! Running automatic optimization..."
            ./scripts/cost_optimization.sh optimize ${{ env.EMAIL_RECIPIENT }}
          else
            echo "Budget usage at $BUDGET_PERCENTAGE% - no automatic optimization needed."
          fi